{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","screens/NotFoundScreen.tsx","services/memento.service.ts","services/auth.service.ts","services/memento-category.service.ts","features/authSlice.ts","features/mementoSlice.ts","features/categorySlice.ts","components/MementoItemModal.tsx","components/MementoHistory.tsx","components/MementoCreateCategoryField.tsx","components/MementoCreate.tsx","components/Auth.tsx","components/ChangePasswordForm.tsx","components/Settings.tsx","screens/MementoHistoryScreen.tsx","components/MementoCategoryChart.tsx","components/MementoCategory.tsx","screens/MementoCategoryScreen.tsx","screens/SettingsScreen.tsx","navigation/LinkingConfiguration.ts","screens/MementoCreateScreen.tsx","screens/AuthScreen.tsx","components/NavigationBar.tsx","navigation/index.tsx","store/store.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","fetchAll","a","async","token","axios","get","Constants","manifest","extra","API_BASE_URL","headers","Authorization","data","fetchByCategory","categoryId","memento","payload","omit","category_id","category","id","post","loginOrCreateAccount","username","password","changePassword","currentPassword","newPassword","name","search","query","limit","fetchOne","createAsyncThunk","thunkApi","AuthService","authInfo","getState","auth","authSlice","createSlice","initialState","is_logged_in","reducers","logout","state","extraReducers","builder","addCase","fulfilled","action","actions","fetchAllMementos","_","MementoService","createMemento","mementoSlice","entities","entityPairs","map","item","fromPairs","set","fetchCategory","MementoCategoryService","mementoCategorySlice","MementoItemModal","onDismiss","showActions","useNavigation","handleViewHistory","useCallback","navigate","screen","params","Portal","Dialog","modal","visible","isNil","Title","Content","section","Subheading","Paragraph","notes","Divider","DateTime","fromISO","created_at","toLocaleString","location","Actions","Button","marginVertical","alignSelf","maxWidth","minWidth","paddingHorizontal","MementoHistory","props","useState","filterQuery","setFilterQuery","selectedMemento","setSelectedMemento","dispatch","useDispatch","mementos","useSelector","store","orderBy","values","entity","filteredMementos","useMemo","filter","toLowerCase","includes","useEffect","MementoHistoryListItem","Item","description","numberOfLines","ellipsizeMode","flexDirection","Chip","icon","marginLeft","left","Icon","Searchbar","placeholder","value","onChangeText","FlatList","list","renderItem","keyExtractor","FAB","fab","paddingTop","display","position","margin","right","bottom","MementoCreateCategoryField","useField","formikInputProps","formikHelperProps","setSearch","selectedCategory","setSelectedCategory","handleChange","original","setValue","clearSelection","promiseFn","length","results","useAsync","categories","isPending","error","TextInput","label","mode","field","ActivityIndicator","animating","IconButton","MementoCreate","handleSubmit","ScrollView","column","initialValues","validationSchema","onSubmit","handleBlur","errors","touched","Section","Accordion","innerAccordion","onBlur","HelperText","type","multiline","createCategory","yup","shape","required","max","min","Auth","handleGetStarted","unwrap","setStatus","message","notice","isValid","isSubmitting","status","msg","secureTextEntry","getStartedAction","disabled","loading","errorStatus","ChangePasswordForm","formikBag","Settings","handleLogout","Surface","logoutAction","borderRadius","MementoHistoryScreen","MementoCategoryChart","ret","dates","toISODate","buckets","reduce","acc","current","thirtyDasyAgo","now","minus","Duration","fromObject","days","i","datetime","plus","push","useLayout","width","height","onLayout","useChart","contentInset","top","x","y","mappedData","line","useLine","fill","strokeWidth","stroke","d","animate","animationDuration","Gradient","key","x1","x2","y2","offset","stopColor","MementoCategory","numberOfEntries","size","numberOfDaysAgoPerEntry","daysRough","diffNow","Math","floor","abs","longestStreak","best","Set","sort","next","comp","MementoListItem","Card","card","MementoCategoryScreen","route","linking","prefixes","Linking","config","screens","Root","MementoStack","NotFound","MementoCreateScreen","AuthScreen","NavigationBar","previous","options","Appbar","Header","BackAction","goBack","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","isLoggedIn","Navigator","Screen","component","BottomTabNavigator","headerShown","BottomTab","createBottomTabNavigator","initialRouteName","screenOptions","tabBarActiveTintColor","Colors","tabBarShowLabel","header","MementoNavigator","tabBarIcon","TabBarIcon","listeners","tabPress","SettingsScreen","MaterialCommunityIcons","marginBottom","persistConfig","version","storage","rootReducer","combineReducers","reducer","persistedReducer","persistReducer","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","App","isLoadingComplete","React","setLoadingComplete","SplashScreen","Font","FontAwesome","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.75c2b03d.chunk.js","sourcesContent":["import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from \"react-native\";\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = \"#2f95dc\";\nconst tintColorDark = \"#fff\";\n\nexport default {\n  light: {\n    text: \"#000\",\n    background: \"#fff\",\n    tint: tintColorLight,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: \"#fff\",\n    background: \"#000\",\n    tint: tintColorDark,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\n\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function NotFoundScreen({\n  navigation,\n}: RootStackScreenProps<\"NotFound\">) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity\n        onPress={() => navigation.replace(\"Root\")}\n        style={styles.link}\n      >\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});\n","import Constants from \"expo-constants\";\nimport axios from \"axios\";\nimport { omit } from \"lodash\";\n\nimport { Memento } from \"../models\";\n\nimport { ApiOptions } from \"./shared\";\n\nexport const fetchAll = async ({ token }: ApiOptions): Promise<Memento[]> => {\n  return (\n    await axios.get(`${Constants.manifest.extra.API_BASE_URL}/api/mementos/`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n  ).data;\n};\n\nexport const fetchByCategory = async (\n  categoryId: string,\n  { token }: ApiOptions\n): Promise<Memento[]> => {\n  return (\n    await axios.get(\n      `${Constants.manifest.extra.API_BASE_URL}/api/mementos/?category=${categoryId}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n  ).data;\n};\n\ntype MementoCreatePayload = Omit<Memento, \"id\" | \"created_at\" | \"updated_at\">;\n\nexport const create = async (\n  memento: MementoCreatePayload,\n  { token }: ApiOptions\n): Promise<Memento> => {\n  const payload = {\n    ...omit(memento, [\"category\"]),\n    category_id: memento.category.id,\n  };\n\n  return (\n    await axios.post(\n      `${Constants.manifest.extra.API_BASE_URL}/api/mementos/`,\n      payload,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n  ).data;\n};\n","import Constants from \"expo-constants\";\nimport axios from \"axios\";\n\nimport { ApiOptions } from \"./shared\";\n\ntype AuthResponse = {\n  username: string;\n  token: string;\n};\n\nexport const loginOrCreateAccount = async (\n  username: string,\n  password: string\n): Promise<AuthResponse> => {\n  const payload = { username, password };\n\n  return (\n    await axios.post(\n      `${Constants.manifest.extra.API_BASE_URL}/myauth/myauth/login_or_signup/`,\n      payload\n    )\n  ).data;\n};\n\nexport const changePassword = async (\n  currentPassword: string,\n  newPassword: string,\n  { token }: ApiOptions\n): Promise<void> => {\n  const payload = { currentPassword, newPassword };\n\n  return (\n    await axios.post(\n      `${Constants.manifest.extra.API_BASE_URL}/myauth/myauth/change_password/`,\n      payload,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n  ).data;\n};\n","import Constants from \"expo-constants\";\nimport axios from \"axios\";\n\nimport { MementoCategory } from \"../models\";\n\nimport { ApiOptions } from \"./shared\";\n\nexport const create = async (\n  name: string,\n  { token }: ApiOptions\n): Promise<MementoCategory> => {\n  const payload = {\n    name,\n  };\n\n  return (\n    await axios.post(\n      `${Constants.manifest.extra.API_BASE_URL}/api/memento-categories/`,\n      payload,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n  ).data;\n};\n\nexport const search = async (\n  query: string,\n  { token, limit }: ApiOptions\n): Promise<MementoCategory[]> => {\n  return (\n    await axios.get(\n      `${Constants.manifest.extra.API_BASE_URL}/api/memento-categories/?name=${query}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n  ).data;\n};\n\nexport const fetchOne = async (\n  categoryId: string,\n  { token }: ApiOptions\n): Promise<MementoCategory> => {\n  return (\n    await axios.get(\n      `${Constants.manifest.extra.API_BASE_URL}/api/memento-categories/${categoryId}/`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n  ).data;\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { AuthService } from \"../services\";\nimport { RootState } from \"../store\";\n\nexport const loginOrCreateAccount = createAsyncThunk(\n  \"auth/loginOrCreateAccount\",\n  async (\n    { username, password }: { username: string; password: string },\n    thunkApi\n  ) => {\n    const authInfo = await AuthService.loginOrCreateAccount(username, password);\n    return authInfo;\n  }\n);\n\ntype ChangePasswordArgs = { currentPassword: string; newPassword: string };\n\nexport const changePassword = createAsyncThunk<\n  void,\n  ChangePasswordArgs,\n  { state: RootState }\n>(\n  \"auth/changePassword\",\n  async ({ currentPassword, newPassword }: ChangePasswordArgs, thunkApi) => {\n    const token = thunkApi.getState().auth.token;\n\n    await AuthService.changePassword(currentPassword, newPassword, { token });\n  }\n);\n\nexport interface AuthState {\n  is_logged_in: boolean;\n  username: string;\n  token: string;\n}\n\nconst initialState: AuthState = {\n  is_logged_in: false,\n  username: \"\",\n  token: \"\",\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.is_logged_in = false;\n      state.username = \"\";\n      state.token = \"\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(loginOrCreateAccount.fulfilled, (state, action) => {\n      const { username, token } = action.payload;\n\n      state.is_logged_in = true;\n      state.username = username;\n      state.token = token;\n    });\n  },\n});\n\nexport const { logout } = authSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { map, fromPairs, set } from \"lodash\";\n\nimport { Memento } from \"../models\";\nimport { RootState } from \"../store\";\nimport { MementoService } from \"../services\";\n\nimport { logout } from \"./authSlice\";\n\nexport const fetchAllMementos = createAsyncThunk<\n  Memento[],\n  void,\n  { state: RootState }\n>(\"mementos/fetchAll\", async (_, thunkApi) => {\n  const token = thunkApi.getState().auth.token;\n\n  return await MementoService.fetchAll({ token });\n});\n\ntype MementoCreatePayload = Omit<Memento, \"id\" | \"created_at\" | \"updated_at\">;\n\nexport const createMemento = createAsyncThunk<\n  Memento,\n  MementoCreatePayload,\n  { state: RootState }\n>(\"mementos/create\", async (memento, thunkApi) => {\n  const token = thunkApi.getState().auth.token;\n\n  return await MementoService.create(memento, { token });\n});\n\nexport interface MementoState {\n  entities: Record<string, Memento>;\n}\n\nconst initialState: MementoState = {\n  entities: {},\n};\n\nexport const mementoSlice = createSlice({\n  name: \"mementos\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchAllMementos.fulfilled, (state, action) => {\n      const entityPairs = map(action.payload, (item) => [item.id, item]);\n      const entities = fromPairs(entityPairs);\n      state.entities = entities;\n    });\n\n    builder.addCase(createMemento.fulfilled, (state, action) => {\n      set(state.entities, action.payload.id, action.payload);\n    });\n\n    builder.addCase(logout, (state) => {\n      state.entities = {};\n    });\n  },\n});\n\nexport const {} = mementoSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { MementoCategory } from \"../models\";\nimport { MementoCategoryService } from \"../services\";\nimport { RootState } from \"../store\";\n\nimport { logout } from \"./authSlice\";\n\nexport const fetchCategory = createAsyncThunk<\n  MementoCategory,\n  string,\n  { state: RootState }\n>(\"categories/fetchOne\", async (categoryId: string, thunkApi) => {\n  const token = thunkApi.getState().auth.token;\n\n  const category = await MementoCategoryService.fetchOne(categoryId, { token });\n\n  return category;\n});\n\nexport interface MementoCategoryState {\n  entities: Record<string, MementoCategory>;\n}\n\nconst initialState: MementoCategoryState = {\n  entities: {},\n};\n\nexport const mementoCategorySlice = createSlice({\n  name: \"mementoCategory\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchCategory.fulfilled, (state, action) => {\n      state.entities[action.payload.id] = action.payload;\n    });\n\n    builder.addCase(logout, (state) => {\n      state.entities = {};\n    });\n  },\n});\n\nexport const {} = mementoCategorySlice.actions;\n","import React, { useCallback } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { View, StyleSheet } from \"react-native\";\nimport {\n  Paragraph,\n  Dialog,\n  Portal,\n  Button,\n  Subheading,\n  Divider,\n} from \"react-native-paper\";\nimport { isNil } from \"lodash\";\n\nimport { Memento } from \"../models\";\nimport { useNavigation } from \"@react-navigation/native\";\n\ntype Props = {\n  memento: Memento | null;\n  onDismiss: () => void;\n  showActions?: boolean;\n};\n\nexport const MementoItemModal: React.FC<Props> = ({\n  memento,\n  onDismiss,\n  showActions = true,\n}) => {\n  const navigation = useNavigation();\n\n  const handleViewHistory = useCallback(() => {\n    onDismiss();\n\n    navigation.navigate(\"Root\", {\n      screen: \"MementoStack\",\n      params: {\n        screen: \"MementoCategory\",\n        params: {\n          categoryId: memento?.category?.id,\n        },\n      },\n    });\n  }, [memento?.id]);\n\n  return (\n    <Portal>\n      <Dialog\n        style={styles.modal}\n        visible={!isNil(memento)}\n        onDismiss={onDismiss}\n      >\n        <Dialog.Title>{memento?.category?.name}</Dialog.Title>\n        <Dialog.Content>\n          <View style={styles.section}>\n            <Subheading>Notes</Subheading>\n            <Paragraph>{memento?.notes}</Paragraph>\n          </View>\n\n          <Divider />\n          <View style={styles.section}>\n            <Subheading>Timestamp</Subheading>\n            <Paragraph>\n              {DateTime.fromISO(memento?.created_at).toLocaleString()}\n            </Paragraph>\n          </View>\n          <Divider />\n          <View style={styles.section}>\n            <Subheading>Location</Subheading>\n            <Paragraph>{memento?.location}</Paragraph>\n          </View>\n        </Dialog.Content>\n        {showActions && (\n          <Dialog.Actions>\n            <Button onPress={handleViewHistory}>\n              View {memento?.category?.name} history\n            </Button>\n          </Dialog.Actions>\n        )}\n      </Dialog>\n    </Portal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  section: {\n    marginVertical: 8,\n  },\n  modal: {\n    alignSelf: \"center\",\n    maxWidth: 640,\n    minWidth: 320,\n    paddingHorizontal: 16,\n  },\n});\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { FlatList, ListRenderItem, View, StyleSheet } from \"react-native\";\nimport {\n  Text,\n  List,\n  Searchbar,\n  FAB,\n  Chip,\n  Paragraph,\n} from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { values, orderBy } from \"lodash\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport { RootState } from \"../store\";\nimport { fetchAllMementos } from \"../features\";\nimport { Memento } from \"../models\";\nimport { MementoItemModal } from \"./MementoItemModal\";\n\nexport const MementoHistory: React.FC = (props) => {\n  const [filterQuery, setFilterQuery] = useState(\"\");\n  const [selectedMemento, setSelectedMemento] = useState<Memento | null>(null);\n\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const mementos = useSelector((store: RootState) =>\n    orderBy(\n      values(store.mementos.entities),\n      (entity) => DateTime.fromISO(entity.created_at),\n      [\"desc\"]\n    )\n  );\n\n  const filteredMementos = useMemo(() => {\n    if (filterQuery) {\n      return mementos.filter((item) =>\n        item.category.name.toLowerCase().includes(filterQuery.toLowerCase())\n      );\n    }\n\n    return mementos;\n  }, [mementos, filterQuery]);\n\n  useEffect(() => {\n    dispatch(fetchAllMementos());\n  }, []);\n\n  const MementoHistoryListItem: ListRenderItem<Memento> = useCallback(\n    ({ item }) => {\n      return (\n        <List.Item\n          onPress={() => setSelectedMemento(item)}\n          title={item.category.name}\n          description={(props) => (\n            <View {...props}>\n              <Paragraph numberOfLines={1} ellipsizeMode=\"tail\">\n                {item.notes}\n              </Paragraph>\n              <View style={{ flexDirection: \"row\" }}>\n                <Chip icon=\"calendar\">\n                  <Text>\n                    {DateTime.fromISO(item.created_at).toLocaleString()}\n                  </Text>\n                </Chip>\n                {item.location && (\n                  <Chip style={{ marginLeft: 8 }} icon=\"map-marker\">\n                    <Text>{item.location}</Text>\n                  </Chip>\n                )}\n              </View>\n            </View>\n          )}\n          left={(props) => <List.Icon {...props} icon=\"note\" />}\n        />\n      );\n    },\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Searchbar\n        style={styles.filter}\n        placeholder=\"Search\"\n        value={filterQuery}\n        onChangeText={setFilterQuery}\n      />\n\n      <FlatList\n        style={styles.list}\n        data={filteredMementos}\n        renderItem={MementoHistoryListItem}\n        keyExtractor={(item) => item.id}\n      />\n      <FAB\n        style={styles.fab}\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"MementoCreate\")}\n      />\n      <MementoItemModal\n        memento={selectedMemento}\n        onDismiss={() => setSelectedMemento(null)}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    paddingTop: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    paddingHorizontal: 24,\n  },\n  filter: {\n    maxWidth: 640,\n    minWidth: 320,\n  },\n  list: {\n    flex: 1,\n    marginVertical: 16,\n    maxWidth: 640,\n    minWidth: 320,\n  },\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import React, { useCallback, useState } from \"react\";\nimport { useAsync } from \"react-async\";\nimport { useField } from \"formik\";\nimport { FlatList, View, StyleSheet } from \"react-native\";\nimport {\n  Button,\n  List,\n  TextInput,\n  ActivityIndicator,\n  Title,\n  IconButton,\n} from \"react-native-paper\";\nimport { isNil, noop } from \"lodash\";\n\nimport { MementoCategory } from \"../models\";\nimport { MementoCategoryService } from \"../services\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\n\ntype MementoSearchCategory = MementoCategory & {\n  original?: string;\n};\n\ntype Props = {};\n\nexport const MementoCreateCategoryField: React.FC<Props> = () => {\n  const [formikInputProps, formikMetaProps, formikHelperProps] =\n    useField(\"category\");\n\n  const auth = useSelector((state: RootState) => state.auth);\n\n  const [search, setSearch] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] =\n    useState<MementoCategory | null>(formikInputProps.value);\n\n  const handleChange = useCallback(\n    async (item: MementoSearchCategory | null) => {\n      let category = item;\n\n      if (item?.id === \"create\") {\n        category = await MementoCategoryService.create(item.original!, {\n          token: auth.token,\n        });\n      }\n\n      formikHelperProps.setValue(category);\n      setSelectedCategory(category);\n    },\n    [auth?.token]\n  );\n\n  const clearSelection = useCallback(() => {\n    setSearch(\"\");\n    handleChange(null);\n  }, [handleChange]);\n\n  const promiseFn = useCallback(async () => {\n    if (search.length < 2) {\n      return [];\n    }\n\n    const results = await MementoCategoryService.search(search, {\n      token: auth.token,\n    });\n\n    return [\n      ...results,\n      {\n        id: \"create\",\n        name: `Create: ${search}`,\n        original: search,\n      },\n    ];\n  }, [search, auth?.token]);\n\n  const { data: categories = [], isPending, error } = useAsync({ promiseFn });\n\n  const renderItem = useCallback(({ item }) => {\n    const icon = item.id === \"create\" ? \"pencil-plus\" : \"tag\";\n    return (\n      <List.Item\n        title={item.name}\n        left={(props) => <List.Icon {...props} icon={icon} />}\n        onPress={() => handleChange(item)}\n      />\n    );\n  }, []);\n\n  if (!isNil(selectedCategory)) {\n    return (\n      <View style={styles.container}>\n        <List.Item\n          title={selectedCategory.name}\n          left={(props) => <List.Icon {...props} icon=\"tag\" />}\n          right={(props) => (\n            <IconButton {...props} onPress={clearSelection} icon=\"delete\" />\n          )}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        label=\"Search\"\n        mode=\"outlined\"\n        style={styles.field}\n        value={search}\n        onChangeText={setSearch}\n      />\n      {isPending && <ActivityIndicator animating />}\n      <FlatList data={categories} renderItem={renderItem} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    marginVertical: 8,\n  },\n  field: {\n    marginVertical: 8,\n  },\n});\n","import React, { useCallback } from \"react\";\nimport { Formik } from \"formik\";\nimport { ScrollView, View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport { HelperText, List, Title, Button, TextInput } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport { MementoCreateCategoryField } from \"./MementoCreateCategoryField\";\n\nimport { createMemento } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\ntype Props = {};\n\nexport const MementoCreate: React.FC<Props> = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleSubmit = useCallback(async (values) => {\n    await dispatch(createMemento(values));\n    navigation.navigate(\"MementoHistory\");\n  }, []);\n\n  return (\n    <ScrollView>\n      <View style={styles.container}>\n        <View style={styles.column}>\n          <Title>Create Memento</Title>\n          <Formik\n            initialValues={{ notes: \"\", location: \"\" }}\n            validationSchema={null}\n            onSubmit={handleSubmit}\n          >\n            {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n            }) => (\n              <>\n                <List.Section>\n                  <List.Accordion title=\"Category\">\n                    <MementoCreateCategoryField />\n                  </List.Accordion>\n                  <List.Accordion title=\"Info\">\n                    <View style={styles.innerAccordion}>\n                      <TextInput\n                        style={styles.field}\n                        label=\"Location\"\n                        mode=\"outlined\"\n                        onChangeText={handleChange(\"location\")}\n                        onBlur={handleBlur(\"location\")}\n                        value={values.location}\n                        error={!!errors.location && !!touched.location}\n                      />\n                      <HelperText\n                        type=\"error\"\n                        visible={!!errors.location && !!touched.location}\n                      >\n                        {errors.location}\n                      </HelperText>\n                      <TextInput\n                        style={styles.field}\n                        label=\"Notes\"\n                        mode=\"outlined\"\n                        multiline={true}\n                        numberOfLines={4}\n                        onChangeText={handleChange(\"notes\")}\n                        onBlur={handleBlur(\"notes\")}\n                        value={values.notes}\n                        error={!!errors.notes && !!touched.notes}\n                      />\n                      <HelperText\n                        type=\"error\"\n                        visible={!!errors.notes && !!touched.notes}\n                      >\n                        {errors.notes}\n                      </HelperText>\n                    </View>\n                  </List.Accordion>\n                </List.Section>\n\n                <Button onPress={handleSubmit} mode=\"outlined\">\n                  Create\n                </Button>\n              </>\n            )}\n          </Formik>\n        </View>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  innerAccordion: {},\n  field: {\n    marginVertical: 8,\n  },\n  createCategory: {\n    marginVertical: 8,\n  },\n});\n","import { useNavigation } from \"@react-navigation/native\";\nimport React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Paragraph,\n  HelperText,\n} from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\n\nimport { loginOrCreateAccount } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\nconst validationSchema = yup.object().shape({\n  username: yup.string().required().max(120),\n  password: yup.string().required().min(6),\n});\n\ntype Props = {};\n\nexport const Auth: React.FC<Props> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const navigation = useNavigation();\n\n  const handleGetStarted = useCallback(async (values, actions) => {\n    try {\n      await dispatch(\n        loginOrCreateAccount({\n          username: values.username,\n          password: values.password,\n        })\n      ).unwrap();\n\n      navigation.navigate(\"Root\");\n    } catch (err) {\n      actions.setStatus({\n        type: \"error\",\n        message:\n          \"Failed to register or login. You probably entered the wrong password for an existing account.\",\n      });\n    }\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.column}>\n        <Title>Login</Title>\n        <Paragraph style={styles.notice}>\n          If you don't have an account, one will be created with the given\n          username and password\n        </Paragraph>\n        <Formik\n          initialValues={{ username: \"\", password: \"\" }}\n          validationSchema={validationSchema}\n          onSubmit={handleGetStarted}\n        >\n          {({\n            handleChange,\n            handleBlur,\n            values,\n            handleSubmit,\n            isValid,\n            errors,\n            touched,\n            isSubmitting,\n            status,\n          }) => (\n            <>\n              <TextInput\n                style={styles.field}\n                label=\"Username\"\n                mode=\"outlined\"\n                onChangeText={handleChange(\"username\")}\n                onBlur={handleBlur(\"username\")}\n                value={values.username}\n                error={!!errors.username && !!touched.username}\n              />\n              <ErrorMessage name=\"username\">\n                {(msg) => <HelperText type=\"error\">{msg}</HelperText>}\n              </ErrorMessage>\n              <TextInput\n                style={styles.field}\n                label=\"Password\"\n                mode=\"outlined\"\n                secureTextEntry\n                onChangeText={handleChange(\"password\")}\n                onBlur={handleBlur(\"password\")}\n                value={values.password}\n                error={!!errors.password && !!touched.password}\n              />\n              <ErrorMessage name=\"password\">\n                {(msg) => <HelperText type=\"error\">{msg}</HelperText>}\n              </ErrorMessage>\n              <Button\n                style={styles.getStartedAction}\n                disabled={!isValid || isSubmitting}\n                loading={isSubmitting}\n                onPress={handleSubmit}\n                mode=\"outlined\"\n              >\n                Get Started\n              </Button>\n              {status && (\n                <HelperText style={styles.errorStatus} type=\"error\">\n                  {status?.message}\n                </HelperText>\n              )}\n            </>\n          )}\n        </Formik>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  field: {\n    marginVertical: 8,\n  },\n  getStartedAction: {\n    marginTop: 8,\n  },\n  notice: {\n    marginVertical: 8,\n  },\n  errorStatus: {\n    marginTop: 8,\n  },\n});\n","import React, { useCallback } from \"react\";\nimport { Formik } from \"formik\";\nimport { View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport { HelperText, Button, TextInput } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport * as yup from \"yup\";\n\nimport { changePassword } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\nconst validationSchema = yup.object().shape({\n  currentPassword: yup.string().required().min(6).max(32),\n  newPassword: yup.string().required().min(6).max(32),\n});\n\ntype Props = {};\n\nexport const ChangePasswordForm: React.FC<Props> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleSubmit = useCallback(async (values, formikBag) => {\n    await dispatch(changePassword(values));\n  }, []);\n\n  return (\n    <View style={{}}>\n      <Formik\n        initialValues={{ currentPassword: \"\", newPassword: \"\" }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          values,\n          errors,\n          touched,\n        }) => (\n          <>\n            <TextInput\n              style={styles.field}\n              label=\"Current Password\"\n              mode=\"outlined\"\n              secureTextEntry\n              onChangeText={handleChange(\"currentPassword\")}\n              onBlur={handleBlur(\"currentPassword\")}\n              value={values.currentPassword}\n              error={!!errors.currentPassword && !!touched.currentPassword}\n            />\n            <HelperText\n              type=\"error\"\n              visible={!!errors.currentPassword && !!touched.currentPassword}\n            >\n              {errors.currentPassword}\n            </HelperText>\n            <TextInput\n              style={styles.field}\n              label=\"New Password\"\n              mode=\"outlined\"\n              secureTextEntry\n              onChangeText={handleChange(\"newPassword\")}\n              onBlur={handleBlur(\"newPassword\")}\n              value={values.newPassword}\n              error={!!errors.newPassword && !!touched.newPassword}\n            />\n            <HelperText\n              type=\"error\"\n              visible={!!errors.newPassword && !!touched.newPassword}\n            >\n              {errors.newPassword}\n            </HelperText>\n\n            <Button onPress={handleSubmit} mode=\"outlined\">\n              Submit\n            </Button>\n          </>\n        )}\n      </Formik>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  field: {\n    marginVertical: 8,\n  },\n});\n","import React, { useCallback } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Surface, Title, Button, Subheading } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\n\nimport { logout } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\nimport { ChangePasswordForm } from \"./ChangePasswordForm\";\n\ntype Props = {};\n\nexport const Settings: React.FC<Props> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleLogout = useCallback(() => {\n    dispatch(logout());\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.column}>\n        <Title>Account</Title>\n\n        <Surface style={styles.section}>\n          <Subheading>Change Password</Subheading>\n          <ChangePasswordForm />\n        </Surface>\n\n        <Surface style={styles.section}>\n          <Subheading>Logout</Subheading>\n          <Button\n            style={styles.logoutAction}\n            mode=\"outlined\"\n            onPress={handleLogout}\n          >\n            Logout\n          </Button>\n        </Surface>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  section: {\n    marginVertical: 8,\n    padding: 16,\n    borderRadius: 8,\n  },\n  logoutAction: {\n    marginTop: 8,\n  },\n});\n","import * as React from \"react\";\n\nimport { MementoHistory } from \"../components\";\n\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function MementoHistoryScreen({\n  navigation,\n}: RootTabScreenProps<\"MementoHistory\">) {\n  return <MementoHistory />;\n}\n","import React, { useMemo } from \"react\";\nimport { DateTime, Duration } from \"luxon\";\nimport { get, map, reduce } from \"lodash\";\nimport { Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport {\n  Path,\n  Chart,\n  useChart,\n  useLayout,\n  useLine,\n} from \"react-native-web-svg-charts\";\n\nimport { Memento } from \"../models\";\n\ntype Props = {\n  mementos: Memento[];\n};\n\nexport const MementoCategoryChart: React.FC<Props> = ({ mementos }) => {\n  const data = useMemo(() => {\n    let ret = [];\n\n    // convert to dates\n    const dates = map(mementos, (item) => {\n      return DateTime.fromISO(item.created_at).toISODate();\n    });\n\n    // bucket by date\n    const buckets = reduce(\n      dates,\n      (acc, current) => ({\n        ...acc,\n        [current]: (acc[current] ?? 0) + 1,\n      }),\n      {} as Record<string, number>\n    );\n\n    const thirtyDasyAgo = DateTime.now().minus(\n      Duration.fromObject({ days: 30 })\n    );\n\n    for (let i = 1; i <= 30; i++) {\n      const datetime = thirtyDasyAgo\n        .plus(Duration.fromObject({ days: i }))\n        .toISODate();\n\n      ret.push(get(buckets, datetime, 0));\n    }\n\n    return ret;\n  }, [mementos]);\n\n  const { width, height, onLayout } = useLayout();\n\n  const { x, y, mappedData } = useChart({\n    width,\n    height,\n    data,\n    contentInset: { top: 20, bottom: 20 },\n  });\n  const { line } = useLine({\n    mappedData,\n    x,\n    y,\n  });\n\n  return (\n    <Chart style={{ height: 200 }} {...{ width, height, onLayout }}>\n      <Gradient />\n      <Path\n        fill=\"none\"\n        strokeWidth={2}\n        stroke=\"url(#gradient)\"\n        d={line}\n        animate\n        animationDuration={300}\n      />\n    </Chart>\n  );\n};\n\nconst Gradient = () => (\n  <Defs key={\"gradient\"}>\n    <LinearGradient id={\"gradient\"} x1={\"0\"} y={\"0%\"} x2={\"100%\"} y2={\"0%\"}>\n      <Stop offset={\"0%\"} stopColor={\"rgb(134, 65, 244)\"} />\n      <Stop offset={\"100%\"} stopColor={\"rgb(66, 194, 244)\"} />\n    </LinearGradient>\n  </Defs>\n);\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { Text, ListRenderItem, FlatList, View, ScrollView } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport {\n  Card,\n  Chip,\n  List,\n  Paragraph,\n  Avatar,\n  Subheading,\n  Divider,\n} from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filter, orderBy, size, values } from \"lodash\";\n\nimport { AppDispatch, RootState } from \"../store\";\nimport { Memento } from \"../models\";\nimport { fetchAllMementos, fetchCategory } from \"../features\";\n\nimport { MementoItemModal } from \"./MementoItemModal\";\nimport { MementoCategoryChart } from \"./MementoCategoryChart\";\n\ntype Props = {\n  categoryId: string;\n};\n\nexport const MementoCategory: React.FC<Props> = ({ categoryId }) => {\n  const [selectedMemento, setSelectedMemento] = useState<Memento | null>(null);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  const category = useSelector(\n    (store: RootState) => store.categories.entities[categoryId]\n  );\n\n  const mementos = useSelector((store: RootState) =>\n    orderBy(\n      filter(\n        values(store.mementos.entities),\n        (item) => item.category.id === categoryId\n      ),\n      (entity) => DateTime.fromISO(entity.created_at),\n      [\"desc\"]\n    )\n  );\n\n  const numberOfEntries = size(mementos);\n  const numberOfDaysAgoPerEntry = useMemo(\n    () =>\n      mementos.map((item) => {\n        const diff = DateTime.fromISO(item.created_at).diffNow(\"days\");\n        // diff will be in terms of days, to a high precision, e.g. -0.5\n        const daysRough = diff.days;\n        // let's floor the absolute, so that -0.1 => 0, and -14.3 => -14\n        const daysAgo = Math.floor(Math.abs(daysRough));\n\n        return daysAgo;\n      }),\n    [mementos]\n  );\n\n  const longestStreak = useMemo(() => {\n    // remove duplicates\n    const uniqueDaysAgo = [...new Set(numberOfDaysAgoPerEntry)].sort();\n\n    let best: number[] = [];\n\n    let current: number[] = [];\n\n    for (const next of uniqueDaysAgo) {\n      if (current.length === 0) {\n        current = [next];\n        continue;\n      }\n\n      let [comp, ...rest] = current;\n\n      if (comp + 1 === next) {\n        current = [next, ...current];\n      } else {\n        if (current.length > best.length) {\n          best = current;\n        }\n      }\n    }\n\n    return best.length;\n  }, numberOfDaysAgoPerEntry);\n\n  useEffect(() => {\n    dispatch(fetchCategory(categoryId));\n    dispatch(fetchAllMementos());\n  }, [categoryId]);\n\n  const MementoListItem: ListRenderItem<Memento> = useCallback(({ item }) => {\n    return (\n      <List.Item\n        title={item.category.name}\n        description={(props) => (\n          <View {...props}>\n            <Paragraph numberOfLines={1} ellipsizeMode=\"tail\">\n              {item.notes}\n            </Paragraph>\n            <View style={{ flexDirection: \"row\" }}>\n              <Chip icon=\"calendar\">\n                <Text>\n                  {DateTime.fromISO(item.created_at).toLocaleString()}\n                </Text>\n              </Chip>\n              {item.location && (\n                <Chip style={{ marginLeft: 8 }} icon=\"map-marker\">\n                  <Text>{item.location}</Text>\n                </Chip>\n              )}\n            </View>\n          </View>\n        )}\n        onPress={() => setSelectedMemento(item)}\n        left={(props) => <List.Icon {...props} icon=\"note\" />}\n      />\n    );\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        <Card style={styles.card}>\n          <Card.Title\n            title={`${category?.name}`}\n            left={(props) => <Avatar.Icon {...props} icon=\"note\" />}\n          />\n          <Card.Content>\n            <View style={styles.section}>\n              <Subheading>First entry</Subheading>\n              <Paragraph>\n                {DateTime.fromISO(category?.created_at).toLocaleString()}\n              </Paragraph>\n            </View>\n            <Divider />\n            <View style={styles.section}>\n              <Subheading>Number of entries</Subheading>\n              <Paragraph>{numberOfEntries}</Paragraph>\n            </View>\n            <Divider />\n            <View style={styles.section}>\n              <Subheading>Longest daily streak</Subheading>\n              <Paragraph>{longestStreak} days</Paragraph>\n            </View>\n            <Divider />\n            <View style={styles.section}>\n              <Subheading>Frequency (last 30 days)</Subheading>\n              <MementoCategoryChart mementos={mementos} />\n            </View>\n          </Card.Content>\n        </Card>\n        <Card style={[styles.card]}>\n          <Card.Title\n            title=\"History\"\n            left={(props) => <Avatar.Icon {...props} icon=\"note-multiple\" />}\n          />\n          <Card.Content>\n            <FlatList\n              data={mementos ?? []}\n              renderItem={MementoListItem}\n              keyExtractor={(item) => item.id}\n            />\n          </Card.Content>\n        </Card>\n      </ScrollView>\n      <MementoItemModal\n        memento={selectedMemento}\n        onDismiss={() => setSelectedMemento(null)}\n        showActions={false}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    paddingTop: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  card: {\n    maxWidth: 640,\n    minWidth: 240,\n    marginVertical: 8,\n  },\n  section: {\n    marginVertical: 8,\n  },\n});\n","import * as React from \"react\";\n\nimport { MementoCategory } from \"../components/MementoCategory\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function MementoCategoryScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"MementoCategory\">) {\n  return <MementoCategory categoryId={route.params?.categoryId} />;\n}\n","import * as React from \"react\";\n\nimport { Settings } from \"../components\";\n\nexport default () => {\n  return <Settings />;\n};\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from \"@react-navigation/native\";\nimport * as Linking from \"expo-linking\";\n\nimport { RootStackParamList } from \"../types\";\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl(\"/\")],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          MementoStack: {\n            screens: {\n              MementoHistory: \"mementos/history\",\n              MementoCreate: \"mementos/create\",\n              MementoCategory: \"categories/\",\n            },\n          },\n          Settings: \"settings\",\n        },\n      },\n      Auth: \"auth\",\n      NotFound: \"*\",\n    },\n  },\n};\n\nexport default linking;\n","import * as React from \"react\";\n\nimport { MementoCreate } from \"../components\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function MementoCreateScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"MementoCreate\">) {\n  return <MementoCreate />;\n}\n","import * as React from \"react\";\n\nimport { Auth } from \"../components\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function AuthScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Auth\">) {\n  return <Auth />;\n}\n","import React from \"react\";\n\nimport { Appbar } from \"react-native-paper\";\n\nexport const NavigationBar: React.FC = ({ navigation, previous, options }) => {\n  const title = options.title ?? \"Mementos\";\n\n  return (\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={title} />\n    </Appbar.Header>\n  );\n};\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as React from \"react\";\nimport { ColorSchemeName } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport MementoHistoryScreen from \"../screens/MementoHistoryScreen\";\nimport MementoCategoryScreen from \"../screens/MementoCategoryScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport {\n  MementoStackParamList,\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport MementoCreateScreen from \"../screens/MementoCreateScreen\";\nimport AuthScreen from \"../screens/AuthScreen\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport { NavigationBar } from \"../components/NavigationBar\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const isLoggedIn = useSelector((store: RootState) => store.auth.is_logged_in);\n\n  return (\n    <Stack.Navigator>\n      {isLoggedIn ? (\n        <>\n          <Stack.Screen\n            name=\"Root\"\n            component={BottomTabNavigator}\n            options={{ headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"NotFound\"\n            component={NotFoundScreen}\n            options={{ title: \"Oops!\" }}\n          />\n        </>\n      ) : (\n        <>\n          <Stack.Screen\n            name=\"Auth\"\n            component={AuthScreen}\n            options={{ title: \"Mementos\" }}\n          />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"MementoStack\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n        tabBarShowLabel: false,\n        header: (props) => <NavigationBar {...props} />,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"MementoStack\"\n        component={MementoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"note-multiple\" color={color} />\n          ),\n        }}\n        listeners={({ navigation, route }) => ({\n          // https://github.com/react-navigation/react-navigation/issues/8583\n          // TODO SO CLOSE\n          tabPress: () => {\n            navigation.navigate(\"MementoHistory\");\n          },\n        })}\n      />\n      <BottomTab.Screen\n        name=\"Settings\"\n        component={SettingsScreen}\n        options={{\n          title: \"Settings\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"account\" color={color} />\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nconst MementoStack = createNativeStackNavigator<MementoStackParamList>();\n\nfunction MementoNavigator() {\n  return (\n    <MementoStack.Navigator screenOptions={{ headerShown: false }}>\n      <MementoStack.Screen\n        name=\"MementoHistory\"\n        component={MementoHistoryScreen}\n      />\n      <MementoStack.Screen\n        name=\"MementoCategory\"\n        component={MementoCategoryScreen}\n      />\n      <MementoStack.Screen\n        name=\"MementoCreate\"\n        component={MementoCreateScreen}\n      />\n    </MementoStack.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof MaterialCommunityIcons>[\"name\"];\n  color: string;\n}) {\n  return (\n    <MaterialCommunityIcons size={30} style={{ marginBottom: -3 }} {...props} />\n  );\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport { authSlice, mementoSlice, mementoCategorySlice } from \"../features\";\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  mementos: mementoSlice.reducer,\n  auth: authSlice.reducer,\n  categories: mementoCategorySlice.reducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const persistor = persistStore(store);\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Provider as StoreProvider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\n\nimport { persistor, store } from \"./store\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <StoreProvider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <PaperProvider>\n            <SafeAreaProvider>\n              <Navigation colorScheme={colorScheme} />\n              <StatusBar />\n            </SafeAreaProvider>\n          </PaperProvider>\n        </PersistGate>\n      </StoreProvider>\n    );\n  }\n}\n","import { FontAwesome } from \"@expo/vector-icons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as React from \"react\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          \"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}