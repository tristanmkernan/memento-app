{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","screens/NotFoundScreen.tsx","services/memento.service.ts","services/auth.service.ts","services/memento-category.service.ts","features/authSlice.ts","features/mementoSlice.ts","features/categoryHistorySlice.ts","components/MementoHistory.tsx","components/MementoItem.tsx","components/MementoCreateCategoryField.tsx","components/MementoCreate.tsx","components/Auth.tsx","components/Settings.tsx","screens/MementoHistoryScreen.tsx","screens/MementoItemScreen.tsx","screens/SettingsScreen.tsx","navigation/LinkingConfiguration.ts","screens/MementoCreateScreen.tsx","screens/AuthScreen.tsx","navigation/index.tsx","store/store.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","fetchAll","a","async","token","fetch","Constants","manifest","extra","API_BASE_URL","method","headers","Authorization","response","json","data","fetchByCategory","categoryId","memento","payload","omit","category_id","category","id","body","JSON","stringify","loginOrCreateAccount","username","password","name","search","query","limit","createAsyncThunk","thunkApi","AuthService","authInfo","authSlice","createSlice","initialState","is_logged_in","reducers","logout","state","extraReducers","builder","addCase","fulfilled","action","actions","fetchAllMementos","_","getState","auth","MementoService","createMemento","mementoSlice","entities","entityPairs","map","item","fromPairs","set","fetchCategoryHistory","mementos","mementoCategoryHistorySlice","MementoHistory","props","useState","filterQuery","setFilterQuery","useNavigation","dispatch","useDispatch","useSelector","store","orderBy","values","entity","DateTime","fromISO","created_at","filteredMementos","useMemo","filter","toLowerCase","includes","useEffect","MementoHistoryListItem","useCallback","Item","description","Paragraph","numberOfLines","ellipsizeMode","notes","flexDirection","Chip","icon","toLocaleString","location","marginLeft","left","Icon","Searchbar","placeholder","value","onChangeText","FlatList","list","renderItem","keyExtractor","FAB","fab","navigate","paddingTop","display","paddingHorizontal","marginVertical","position","margin","right","bottom","MementoItem","mementoId","categoryHistory","get","mementoCategoryHistory","subtitle","ScrollView","Card","card","Title","Content","maxWidth","minWidth","MementoCreateCategoryField","useField","formikInputProps","formikHelperProps","setSearch","selectedCategory","setSelectedCategory","handleChange","MementoCategoryService","original","setValue","clearSelection","promiseFn","length","results","useAsync","categories","isPending","error","isNil","TextInput","label","mode","field","ActivityIndicator","animating","IconButton","MementoCreate","handleSubmit","column","initialValues","validationSchema","onSubmit","handleBlur","errors","touched","Section","Accordion","innerAccordion","onBlur","HelperText","type","visible","multiline","Button","createCategory","yup","shape","required","max","min","Auth","handleGetStarted","unwrap","notice","isValid","isSubmitting","secureTextEntry","getStartedAction","disabled","loading","Settings","handleLogout","MementoHistoryScreen","MementoItemScreen","route","params","linking","prefixes","Linking","config","screens","Root","MementoStack","NotFound","MementoCreateScreen","AuthScreen","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","isLoggedIn","Navigator","Screen","component","BottomTabNavigator","options","headerShown","BottomTab","createBottomTabNavigator","initialRouteName","screenOptions","tabBarActiveTintColor","Colors","tabBarShowLabel","MementoNavigator","tabBarIcon","TabBarIcon","SettingsScreen","Group","presentation","MaterialCommunityIcons","size","marginBottom","persistConfig","key","version","storage","rootReducer","combineReducers","reducer","persistedReducer","persistReducer","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","App","isLoadingComplete","React","setLoadingComplete","SplashScreen","Font","FontAwesome","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.324e2b4a.chunk.js","sourcesContent":["import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from \"react-native\";\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = \"#2f95dc\";\nconst tintColorDark = \"#fff\";\n\nexport default {\n  light: {\n    text: \"#000\",\n    background: \"#fff\",\n    tint: tintColorLight,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: \"#fff\",\n    background: \"#000\",\n    tint: tintColorDark,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\n\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function NotFoundScreen({\n  navigation,\n}: RootStackScreenProps<\"NotFound\">) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity\n        onPress={() => navigation.replace(\"Root\")}\n        style={styles.link}\n      >\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});\n","import Constants from \"expo-constants\";\nimport { omit } from \"lodash\";\n\nimport { Memento } from \"../models\";\n\ntype Options = {\n  token?: string;\n};\n\nexport const fetchAll = async ({ token }: Options): Promise<Memento[]> => {\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/api/mementos/`,\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const fetchByCategory = async (\n  categoryId: string,\n  { token }: Options\n): Promise<Memento[]> => {\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/api/mementos/?category=${categoryId}`,\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n\ntype MementoCreatePayload = Omit<Memento, \"id\" | \"created_at\" | \"updated_at\">;\n\nexport const create = async (\n  memento: MementoCreatePayload,\n  { token }: Options\n): Promise<Memento> => {\n  const payload = {\n    ...omit(memento, [\"category\"]),\n    category_id: memento.category.id,\n  };\n\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/api/mementos/`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n","import Constants from \"expo-constants\";\n\ntype AuthResponse = {\n  username: string;\n  token: string;\n};\n\nexport const loginOrCreateAccount = async (\n  username: string,\n  password: string\n): Promise<AuthResponse> => {\n  const payload = { username, password };\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/myauth/myauth/login_or_signup/`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n","import Constants from \"expo-constants\";\n\nimport { MementoCategory } from \"../models\";\n\ntype Options = {\n  token?: string;\n  limit?: number;\n};\n\nexport const create = async (\n  name: string,\n  { token }: Options\n): Promise<MementoCategory> => {\n  const payload = {\n    name,\n  };\n\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/api/memento-categories/`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const search = async (\n  query: string,\n  { token, limit }: Options\n): Promise<MementoCategory[]> => {\n  const response = await fetch(\n    `${Constants.manifest.extra.API_BASE_URL}/api/memento-categories/?name=${query}`,\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n  const data = await response.json();\n  return data;\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { AuthService } from \"../services\";\n\nexport const loginOrCreateAccount = createAsyncThunk(\n  \"auth/loginOrCreateAccount\",\n  async (\n    { username, password }: { username: string; password: string },\n    thunkApi\n  ) => {\n    const authInfo = await AuthService.loginOrCreateAccount(username, password);\n    return authInfo;\n  }\n);\n\nexport interface AuthState {\n  is_logged_in: boolean;\n  username: string;\n  token: string;\n}\n\nconst initialState: AuthState = {\n  is_logged_in: false,\n  username: \"\",\n  token: \"\",\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.is_logged_in = false;\n      state.username = \"\";\n      state.token = \"\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(loginOrCreateAccount.fulfilled, (state, action) => {\n      const { username, token } = action.payload;\n\n      state.is_logged_in = true;\n      state.username = username;\n      state.token = token;\n    });\n  },\n});\n\nexport const { logout } = authSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { map, fromPairs, set } from \"lodash\";\n\nimport { Memento } from \"../models\";\nimport { RootState } from \"../store\";\nimport { MementoService } from \"../services\";\n\nimport { logout } from \"./authSlice\";\n\nexport const fetchAllMementos = createAsyncThunk<\n  Memento[],\n  void,\n  { state: RootState }\n>(\"mementos/fetchAll\", async (_, thunkApi) => {\n  const token = thunkApi.getState().auth.token;\n\n  return await MementoService.fetchAll({ token });\n});\n\ntype MementoCreatePayload = Omit<Memento, \"id\" | \"created_at\" | \"updated_at\">;\n\nexport const createMemento = createAsyncThunk<\n  Memento,\n  MementoCreatePayload,\n  { state: RootState }\n>(\"mementos/create\", async (memento, thunkApi) => {\n  const token = thunkApi.getState().auth.token;\n\n  return await MementoService.create(memento, { token });\n});\n\nexport interface MementoState {\n  entities: Record<string, Memento>;\n}\n\nconst initialState: MementoState = {\n  entities: {},\n};\n\nexport const mementoSlice = createSlice({\n  name: \"mementos\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchAllMementos.fulfilled, (state, action) => {\n      const entityPairs = map(action.payload, (item) => [item.id, item]);\n      const entities = fromPairs(entityPairs);\n      state.entities = entities;\n    });\n\n    builder.addCase(createMemento.fulfilled, (state, action) => {\n      set(state.entities, action.payload.id, action.payload);\n    });\n\n    builder.addCase(logout, (state) => {\n      state.entities = {};\n    });\n  },\n});\n\nexport const {} = mementoSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { Memento } from \"../models\";\nimport { MementoService } from \"../services\";\n\nimport { logout } from \"./authSlice\";\n\nexport const fetchCategoryHistory = createAsyncThunk(\n  \"mementoHistory/fetchOne\",\n  async (categoryId: string, thunkApi) => {\n    const mementos = await MementoService.fetchByCategory(categoryId);\n    return {\n      categoryId,\n      mementos,\n    };\n  }\n);\n\nexport interface MementoCategoryHistoryState {\n  entities: Record<string, Memento[]>;\n}\n\nconst initialState: MementoCategoryHistoryState = {\n  entities: {},\n};\n\nexport const mementoCategoryHistorySlice = createSlice({\n  name: \"mementoCategoryHistory\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchCategoryHistory.fulfilled, (state, action) => {\n      const { categoryId, mementos } = action.payload;\n      state.entities[categoryId] = mementos;\n    });\n\n    builder.addCase(logout, (state) => {\n      state.entities = {};\n    });\n  },\n});\n\nexport const {} = mementoCategoryHistorySlice.actions;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { FlatList, ListRenderItem, View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport {\n  Text,\n  List,\n  Searchbar,\n  FAB,\n  Chip,\n  Paragraph,\n} from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { values, orderBy } from \"lodash\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport { RootState } from \"../store\";\nimport { fetchAllMementos } from \"../features\";\nimport { Memento } from \"../models\";\n\nexport const MementoHistory: React.FC = (props) => {\n  const [filterQuery, setFilterQuery] = useState(\"\");\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const mementos = useSelector((store: RootState) =>\n    orderBy(\n      values(store.mementos.entities),\n      (entity) => DateTime.fromISO(entity.created_at),\n      [\"desc\"]\n    )\n  );\n\n  const filteredMementos = useMemo(() => {\n    if (filterQuery) {\n      return mementos.filter((item) =>\n        item.category.name.toLowerCase().includes(filterQuery.toLowerCase())\n      );\n    }\n\n    return mementos;\n  }, [mementos, filterQuery]);\n\n  useEffect(() => {\n    dispatch(fetchAllMementos());\n  }, []);\n\n  const MementoHistoryListItem: ListRenderItem<Memento> = useCallback(\n    ({ item }) => {\n      return (\n        <List.Item\n          title={item.category.name}\n          description={(props) => (\n            <View {...props}>\n              <Paragraph numberOfLines={1} ellipsizeMode=\"tail\">\n                {item.notes}\n              </Paragraph>\n              <View style={{ flexDirection: \"row\" }}>\n                <Chip icon=\"calendar\">\n                  <Text>\n                    {DateTime.fromISO(item.created_at).toLocaleString()}\n                  </Text>\n                </Chip>\n                {item.location && (\n                  <Chip style={{ marginLeft: 8 }} icon=\"map-marker\">\n                    <Text>{item.location}</Text>\n                  </Chip>\n                )}\n              </View>\n            </View>\n          )}\n          left={(props) => <List.Icon {...props} icon=\"note\" />}\n        />\n      );\n    },\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Searchbar\n        placeholder=\"Search\"\n        value={filterQuery}\n        onChangeText={setFilterQuery}\n      />\n\n      <FlatList\n        style={styles.list}\n        data={filteredMementos}\n        renderItem={MementoHistoryListItem}\n        keyExtractor={(item) => item.id}\n      />\n      <FAB\n        style={styles.fab}\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"MementoCreate\")}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    paddingHorizontal: 24,\n  },\n  list: {\n    flex: 1,\n    marginVertical: 16,\n  },\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { Text, ListRenderItem, FlatList, View, ScrollView } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport { Card, Chip, List, Paragraph, Avatar } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { get } from \"lodash\";\n\nimport { AppDispatch, RootState } from \"../store\";\nimport { Memento } from \"../models\";\nimport { fetchCategoryHistory } from \"../features\";\n\ntype Props = {\n  mementoId: string;\n};\n\nexport const MementoItem: React.FC<Props> = ({ mementoId }) => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const memento = useSelector(\n    (store: RootState) => store.mementos.entities[mementoId]\n  );\n  const categoryHistory = useSelector((store: RootState) =>\n    get(store.mementoCategoryHistory.entities, memento?.category?.id, [])\n  );\n\n  useEffect(() => {\n    dispatch(fetchCategoryHistory(memento?.category?.id));\n  }, [memento?.category?.id]);\n\n  const MementoHistoryListItem: ListRenderItem<Memento> = useCallback(\n    ({ item }) => {\n      return (\n        <List.Item\n          title={item.category.name}\n          description={(props) => (\n            <View {...props}>\n              <Paragraph numberOfLines={1} ellipsizeMode=\"tail\">\n                {item.notes}\n              </Paragraph>\n              <View style={{ flexDirection: \"row\" }}>\n                <Chip icon=\"calendar\">\n                  <Text>\n                    {DateTime.fromISO(item.created_at).toLocaleString()}\n                  </Text>\n                </Chip>\n\n                <Chip style={{ marginLeft: 8 }} icon=\"map-marker\">\n                  <Text>{item.location}</Text>\n                </Chip>\n              </View>\n            </View>\n          )}\n          onPress={() =>\n            navigation.navigate(\"MementoItem\", { mementoId: item.id })\n          }\n          left={(props) => <List.Icon {...props} icon=\"note\" />}\n        />\n      );\n    },\n    []\n  );\n\n  const subtitle = `${memento?.location} - ${DateTime.fromISO(\n    memento?.created_at\n  ).toLocaleString()}`;\n\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        <Card style={styles.card}>\n          <Card.Title\n            title={memento?.category?.name}\n            subtitle={subtitle}\n            left={(props) => <Avatar.Icon {...props} icon=\"note\" />}\n          />\n          <Card.Content>\n            <Paragraph>{memento?.notes}</Paragraph>\n          </Card.Content>\n        </Card>\n        <Card style={[styles.card]}>\n          <Card.Title\n            title=\"Other Entries\"\n            left={(props) => <Avatar.Icon {...props} icon=\"note-multiple\" />}\n          />\n          <Card.Content>\n            <FlatList\n              data={categoryHistory ?? []}\n              renderItem={MementoHistoryListItem}\n              keyExtractor={(item) => item.id}\n            />\n          </Card.Content>\n        </Card>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    paddingTop: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  card: {\n    maxWidth: 360,\n    minWidth: 240,\n    marginVertical: 8,\n  },\n});\n","import React, { useCallback, useState } from \"react\";\nimport { useAsync } from \"react-async\";\nimport { useField } from \"formik\";\nimport { FlatList, View, StyleSheet } from \"react-native\";\nimport {\n  Button,\n  List,\n  TextInput,\n  ActivityIndicator,\n  Title,\n  IconButton,\n} from \"react-native-paper\";\nimport { isNil, noop } from \"lodash\";\n\nimport { MementoCategory } from \"../models\";\nimport { MementoCategoryService } from \"../services\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\n\ntype MementoSearchCategory = MementoCategory & {\n  original?: string;\n};\n\ntype Props = {};\n\nexport const MementoCreateCategoryField: React.FC<Props> = () => {\n  const [formikInputProps, formikMetaProps, formikHelperProps] =\n    useField(\"category\");\n\n  const auth = useSelector((state: RootState) => state.auth);\n\n  const [search, setSearch] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] =\n    useState<MementoCategory | null>(formikInputProps.value);\n\n  const handleChange = useCallback(\n    async (item: MementoSearchCategory | null) => {\n      let category = item;\n\n      if (item?.id === \"create\") {\n        category = await MementoCategoryService.create(item.original!, {\n          token: auth.token,\n        });\n      }\n\n      formikHelperProps.setValue(category);\n      setSelectedCategory(category);\n    },\n    [auth?.token]\n  );\n\n  const clearSelection = useCallback(() => {\n    setSearch(\"\");\n    handleChange(null);\n  }, [handleChange]);\n\n  const promiseFn = useCallback(async () => {\n    if (search.length < 2) {\n      return [];\n    }\n\n    const results = await MementoCategoryService.search(search, {\n      token: auth.token,\n    });\n\n    return [\n      ...results,\n      {\n        id: \"create\",\n        name: `Create: ${search}`,\n        original: search,\n      },\n    ];\n  }, [search, auth?.token]);\n\n  const { data: categories = [], isPending, error } = useAsync({ promiseFn });\n\n  const renderItem = useCallback(({ item }) => {\n    const icon = item.id === \"create\" ? \"pencil-plus\" : \"tag\";\n    return (\n      <List.Item\n        title={item.name}\n        left={(props) => <List.Icon {...props} icon={icon} />}\n        onPress={() => handleChange(item)}\n      />\n    );\n  }, []);\n\n  if (!isNil(selectedCategory)) {\n    return (\n      <View style={styles.container}>\n        <List.Item\n          title={selectedCategory.name}\n          left={(props) => <List.Icon {...props} icon=\"tag\" />}\n          right={(props) => (\n            <IconButton {...props} onPress={clearSelection} icon=\"delete\" />\n          )}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        label=\"Search\"\n        mode=\"outlined\"\n        style={styles.field}\n        value={search}\n        onChangeText={setSearch}\n      />\n      {isPending && <ActivityIndicator animating />}\n      <FlatList data={categories} renderItem={renderItem} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    marginVertical: 8,\n  },\n  field: {\n    marginVertical: 8,\n  },\n});\n","import React, { useCallback } from \"react\";\nimport { Formik } from \"formik\";\nimport { ScrollView, View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport { HelperText, List, Title, Button, TextInput } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport { MementoCreateCategoryField } from \"./MementoCreateCategoryField\";\n\nimport { createMemento } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\ntype Props = {};\n\nexport const MementoCreate: React.FC<Props> = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleSubmit = useCallback(async (values) => {\n    await dispatch(createMemento(values));\n    navigation.navigate(\"MementoHistory\");\n  }, []);\n\n  return (\n    <ScrollView>\n      <View style={styles.container}>\n        <View style={styles.column}>\n          <Title>Create Memento</Title>\n          <Formik\n            initialValues={{ notes: \"\", location: \"\" }}\n            validationSchema={null}\n            onSubmit={handleSubmit}\n          >\n            {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n            }) => (\n              <>\n                <List.Section>\n                  <List.Accordion title=\"Category\">\n                    <MementoCreateCategoryField />\n                  </List.Accordion>\n                  <List.Accordion title=\"Info\">\n                    <View style={styles.innerAccordion}>\n                      <TextInput\n                        style={styles.field}\n                        label=\"Location\"\n                        mode=\"outlined\"\n                        onChangeText={handleChange(\"location\")}\n                        onBlur={handleBlur(\"location\")}\n                        value={values.location}\n                        error={!!errors.location && !!touched.location}\n                      />\n                      <HelperText\n                        type=\"error\"\n                        visible={!!errors.location && !!touched.location}\n                      >\n                        {errors.location}\n                      </HelperText>\n                      <TextInput\n                        style={styles.field}\n                        label=\"Notes\"\n                        mode=\"outlined\"\n                        multiline={true}\n                        numberOfLines={4}\n                        onChangeText={handleChange(\"notes\")}\n                        onBlur={handleBlur(\"notes\")}\n                        value={values.notes}\n                        error={!!errors.notes && !!touched.notes}\n                      />\n                      <HelperText\n                        type=\"error\"\n                        visible={!!errors.notes && !!touched.notes}\n                      >\n                        {errors.notes}\n                      </HelperText>\n                    </View>\n                  </List.Accordion>\n                </List.Section>\n\n                <Button onPress={handleSubmit} mode=\"outlined\">\n                  Create\n                </Button>\n              </>\n            )}\n          </Formik>\n        </View>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  innerAccordion: {},\n  field: {\n    marginVertical: 8,\n  },\n  createCategory: {\n    marginVertical: 8,\n  },\n});\n","import { useNavigation } from \"@react-navigation/native\";\nimport React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Paragraph,\n  HelperText,\n} from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\n\nimport { loginOrCreateAccount } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\nconst validationSchema = yup.object().shape({\n  username: yup.string().required().max(120),\n  password: yup.string().required().min(6),\n});\n\ntype Props = {};\n\nexport const Auth: React.FC<Props> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const navigation = useNavigation();\n\n  const handleGetStarted = useCallback(async (values) => {\n    await dispatch(\n      loginOrCreateAccount({\n        username: values.username,\n        password: values.password,\n      })\n    ).unwrap();\n\n    navigation.navigate(\"Root\");\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.column}>\n        <Title>Login</Title>\n        <Paragraph style={styles.notice}>\n          If you don't have an account, one will be created with the given\n          username and password\n        </Paragraph>\n        <Formik\n          initialValues={{ username: \"\", password: \"\" }}\n          validationSchema={validationSchema}\n          onSubmit={handleGetStarted}\n        >\n          {({\n            handleChange,\n            handleBlur,\n            values,\n            handleSubmit,\n            isValid,\n            errors,\n            touched,\n            isSubmitting,\n          }) => (\n            <>\n              <TextInput\n                style={styles.field}\n                label=\"Username\"\n                mode=\"outlined\"\n                onChangeText={handleChange(\"username\")}\n                onBlur={handleBlur(\"username\")}\n                value={values.username}\n                error={!!errors.username && !!touched.username}\n              />\n              <HelperText\n                type=\"error\"\n                visible={!!errors.username && !!touched.username}\n              >\n                {errors.username}\n              </HelperText>\n              <TextInput\n                style={styles.field}\n                label=\"Password\"\n                mode=\"outlined\"\n                secureTextEntry\n                onChangeText={handleChange(\"password\")}\n                onBlur={handleBlur(\"password\")}\n                value={values.password}\n                error={!!errors.password && !!touched.password}\n              />\n              <HelperText\n                type=\"error\"\n                visible={!!errors.password && !!touched.password}\n              >\n                {errors.password}\n              </HelperText>\n              <Button\n                style={styles.getStartedAction}\n                disabled={!isValid || isSubmitting}\n                loading={isSubmitting}\n                onPress={handleSubmit}\n                mode=\"outlined\"\n              >\n                Get Started\n              </Button>\n            </>\n          )}\n        </Formik>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  field: {\n    marginVertical: 8,\n  },\n  getStartedAction: {\n    marginTop: 8,\n  },\n  notice: {\n    marginVertical: 8,\n  },\n});\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport { Title, Button } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\n\nimport { logout } from \"../features\";\nimport { AppDispatch } from \"../store\";\n\ntype Props = {};\n\nexport const Settings: React.FC<Props> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleLogout = useCallback(() => {\n    dispatch(logout());\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.column}>\n        <Title>Account</Title>\n        <Button mode=\"outlined\" onPress={handleLogout}>\n          Logout\n        </Button>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  column: {\n    flex: 1,\n    alignItems: \"stretch\",\n    paddingTop: 24,\n    paddingHorizontal: 24,\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: 480,\n  },\n  field: {\n    marginVertical: 8,\n  },\n  getStartedAction: {\n    marginTop: 8,\n  },\n  notice: {\n    marginVertical: 8,\n  },\n});\n","import * as React from \"react\";\n\nimport { MementoHistory } from \"../components\";\n\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function MementoHistoryScreen({\n  navigation,\n}: RootTabScreenProps<\"MementoHistory\">) {\n  return <MementoHistory />;\n}\n","import * as React from \"react\";\n\nimport { MementoItem } from \"../components\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function MementoItemScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"MementoItem\">) {\n  return <MementoItem mementoId={route.params?.mementoId} />;\n}\n","import * as React from \"react\";\n\nimport { Settings } from \"../components\";\n\nexport default () => {\n  return <Settings />;\n};\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from \"@react-navigation/native\";\nimport * as Linking from \"expo-linking\";\n\nimport { RootStackParamList } from \"../types\";\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl(\"/\")],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          MementoStack: {\n            screens: {\n              MementoHistory: \"mementos/history\",\n              MementoCreate: \"mementos/create\",\n              MementoItem: \"mementos/item\",\n            },\n          },\n          Settings: \"settings\",\n        },\n      },\n      Auth: \"auth\",\n      NotFound: \"*\",\n    },\n  },\n};\n\nexport default linking;\n","import * as React from \"react\";\n\nimport { MementoCreate } from \"../components\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function MementoCreateScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"MementoCreate\">) {\n  return <MementoCreate />;\n}\n","import * as React from \"react\";\n\nimport { Auth } from \"../components\";\nimport { RootStackScreenProps, RootTabScreenProps } from \"../types\";\n\nexport default function AuthScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Auth\">) {\n  return <Auth />;\n}\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as React from \"react\";\nimport { ColorSchemeName } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport MementoHistoryScreen from \"../screens/MementoHistoryScreen\";\nimport MementoItemScreen from \"../screens/MementoItemScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport {\n  MementoStackParamList,\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport MementoCreateScreen from \"../screens/MementoCreateScreen\";\nimport AuthScreen from \"../screens/AuthScreen\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const isLoggedIn = useSelector((store: RootState) => store.auth.is_logged_in);\n\n  return (\n    <Stack.Navigator>\n      {isLoggedIn ? (\n        <>\n          <Stack.Screen\n            name=\"Root\"\n            component={BottomTabNavigator}\n            options={{ headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"NotFound\"\n            component={NotFoundScreen}\n            options={{ title: \"Oops!\" }}\n          />\n        </>\n      ) : (\n        <>\n          <Stack.Screen\n            name=\"Auth\"\n            component={AuthScreen}\n            options={{ title: \"Mementos\" }}\n          />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"MementoStack\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n        tabBarShowLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"MementoStack\"\n        component={MementoNavigator}\n        options={{\n          headerShown: false,\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"note-multiple\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Settings\"\n        component={SettingsScreen}\n        options={{\n          title: \"Settings\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"account\" color={color} />\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nconst MementoStack = createNativeStackNavigator<MementoStackParamList>();\n\nfunction MementoNavigator() {\n  return (\n    <MementoStack.Navigator\n      screenOptions={{\n        title: \"Mementos\",\n      }}\n    >\n      <MementoStack.Screen\n        name=\"MementoHistory\"\n        component={MementoHistoryScreen}\n      />\n      <MementoStack.Group screenOptions={{ presentation: \"modal\" }}>\n        <MementoStack.Screen name=\"MementoItem\" component={MementoItemScreen} />\n        <MementoStack.Screen\n          name=\"MementoCreate\"\n          component={MementoCreateScreen}\n        />\n      </MementoStack.Group>\n    </MementoStack.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof MaterialCommunityIcons>[\"name\"];\n  color: string;\n}) {\n  return (\n    <MaterialCommunityIcons size={30} style={{ marginBottom: -3 }} {...props} />\n  );\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport {\n  authSlice,\n  mementoSlice,\n  mementoCategoryHistorySlice,\n} from \"../features\";\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  mementos: mementoSlice.reducer,\n  auth: authSlice.reducer,\n  mementoCategoryHistory: mementoCategoryHistorySlice.reducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const persistor = persistStore(store);\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Provider as StoreProvider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\n\nimport { persistor, store } from \"./store\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <StoreProvider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <PaperProvider>\n            <SafeAreaProvider>\n              <Navigation colorScheme={colorScheme} />\n              <StatusBar />\n            </SafeAreaProvider>\n          </PaperProvider>\n        </PersistGate>\n      </StoreProvider>\n    );\n  }\n}\n","import { FontAwesome } from \"@expo/vector-icons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as React from \"react\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          \"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}